#coding=utf-8
class Car():
	#一次模拟汽车的简单尝试
	
	def __init__(self,make,model,year):
		#初始化汽车的属性
		self.make = make
		self.model = model
		self.year = year
		self.odometer_reading = 0
		
	def get_descriptive_name(self):
		#返回整洁的描述信息
		long_name = str(self.year) + " " +self.make + " " + self.model
		return long_name.title()
		
	def read_odometer(self):
		#打印出一条指出汽车里程的消息
		print("\nThis car has " + str(self.odometer_reading) + " miles on it.")
		
	def update_odometer(self,mileage):#第二种，通过放大修改数值
		#将里程表读数设置为指定的值
		#禁止里程数回调
		if mileage > self.odometer_reading:
			self.odometer_reading = mileage
		else:
			print("\nYou can`t roll back an odometer")
			
	def increment_odometer(self,miles):
		#将里程表读数增加指定量
		self.odometer_reading += miles
		
		
my_new_car = Car('audi','a4',2016)
print(my_new_car.get_descriptive_name())
my_new_car.read_odometer()

#三种修改参数的方法，self.odometer_reading为例
my_new_car.odometer_reading = 22#第一种，直接修改数值
my_new_car.read_odometer()

my_new_car.update_odometer(23)#第二种
my_new_car.read_odometer()

my_new_car.update_odometer(20)#实验里程数无法回调

#第三种，通过方法对属性进行递增
print('\n')
my_used_car = Car("bmw","X6",2018)
print(my_used_car.get_descriptive_name())

my_new_car.update_odometer(20000)
my_new_car.read_odometer()

my_new_car.increment_odometer(6812)
my_new_car.read_odometer()
